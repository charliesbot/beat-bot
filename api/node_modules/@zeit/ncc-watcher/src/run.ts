import fs from 'fs';
import path from 'path';
import ncc from '@zeit/ncc';
import { NccWatcher, CustomWatchFileSystem } from './';

const sleep = (n: number) => new Promise(r => setTimeout(r, n));

async function main() {
  let buildCount = 0;
  const buildFile = path.resolve('./code/a.js');
  const watcher = new CustomWatchFileSystem(function watchStart (files, dirs, missing) {
    console.error('\n\n\n');
    console.error('watchStart()', { files, dirs, missing });
    //expect(files.length).toBeGreaterThan(100);
    //expect(dirs.length).toBeGreaterThan(0);
    //expect(missing.length).toBeGreaterThan(100);
    if (buildCount < 3) {
      setTimeout(() => {
        // NOTE: We actually have to make the change for the rebuild to happen!
        fs.writeFileSync(buildFile, fs.readFileSync(buildFile).toString() + '\n');
        watcher.triggerChanges([buildFile], []);
      }, 1000);
    }
  }, function watchEnd () {
    console.error('watch end');
  });

  console.time(`Build #${++buildCount}`);
  const { handler, rebuild, close } = ncc(buildFile, {
    watch: watcher,
    sourceMap: true
  });

  handler(({ err, code, map, assets, permissions }) => {
    console.timeEnd(`Build #${buildCount}`);
    console.error({ err, code, map, assets, permissions });
    if (err) return console.error({ err });
    if (buildCount === 3) {
      close();
      fs.writeFileSync(buildFile, fs.readFileSync(buildFile).toString().slice(0, -2));
    }
  });

  rebuild(() => {
    console.log('rebuild() callback invoked', arguments);
    console.time(`Build #${++buildCount}`);
  });
}

async function main2() {
  const buildFile = path.resolve('./code/a.js');
  const data = fs.readFileSync(buildFile, 'utf8');

  console.time('first');
  const watcher = new NccWatcher(buildFile);
  const build1 = await watcher.build();
  console.error(build1.files);
  //console.error({ build1 });
  console.timeEnd('first');

  console.time('second');
  fs.writeFileSync(buildFile, data + `\n${data.replace(/b/g, 'c')}`);
  const build2 = await watcher.build([ buildFile ]);
  //console.error({ build2 });
  console.error(build2.files);
  console.timeEnd('second');

  console.time('third');
  fs.writeFileSync(buildFile, data + `\n${data.replace(/b/g, 'd')}`);
  const build3 = await watcher.build([ buildFile ]);
  console.error(build3.files);
  console.timeEnd('third');

  // reset
  fs.writeFileSync(buildFile, data);
  watcher.close();
}

main2().catch(err => {
  console.error({ err });
  process.exit(1);
});
