/// <reference types="zeit__ncc" />
import ncc from '@zeit/ncc';
export interface FileMeta {
    safeTime?: number;
    accuracy?: number;
    timestamp?: number;
}
export interface InputFileSystem {
    purge: (file: string) => void;
}
export declare type Timestamps = Map<string, FileMeta | null>;
export declare type ChangeCallback = (err: Error | null, timestamps1: Timestamps, timestamps2: Timestamps, removed: string[]) => void;
export declare type WatchStart = (files: string[], dirs: string[], missing: string[]) => void;
export declare type WatchEnd = () => void;
export declare class CustomWatchFileSystem {
    private closed;
    private paused;
    private files;
    private dirs;
    private missing;
    private timestamps;
    private inputFileSystem;
    private changeCallback;
    private watchStart;
    private watchEnd;
    constructor(watchStart: WatchStart, watchEnd: WatchEnd);
    triggerChanges(changed: string[], removed: string[]): void;
    watch(files: string[], dirs: string[], missing: string[], startTime: number, options: object, changeCallback: ChangeCallback): {
        close: () => void;
        pause: () => void;
        getFileTimestamps: () => Map<string, FileMeta | null>;
        getContextTimestamps: () => Map<string, FileMeta | null>;
    };
}
export interface FilesConsumed {
    files: string[];
    dirs: string[];
    missing: string[];
}
export declare type WatcherResult = ncc.BuildResult & FilesConsumed;
export declare class NccWatcher {
    private watcher;
    private filesDeferred;
    private buildDeferred;
    close: ncc.CloseCallback;
    constructor(entrypoint: string, options?: ncc.NccOptions);
    onWatchStart(files: string[], dirs: string[], missing: string[]): void;
    onWatchEnd(): void;
    onBuild(result: ncc.BuildResult): void;
    onRebuild(): void;
    build(changed?: string[], removed?: string[]): Promise<WatcherResult>;
}
