"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const ncc_1 = __importDefault(require("@zeit/ncc"));
const _1 = require("./");
const sleep = (n) => new Promise(r => setTimeout(r, n));
async function main() {
    let buildCount = 0;
    const buildFile = path_1.default.resolve('./code/a.js');
    const watcher = new _1.CustomWatchFileSystem(function watchStart(files, dirs, missing) {
        console.error('\n\n\n');
        console.error('watchStart()', { files, dirs, missing });
        //expect(files.length).toBeGreaterThan(100);
        //expect(dirs.length).toBeGreaterThan(0);
        //expect(missing.length).toBeGreaterThan(100);
        if (buildCount < 3) {
            setTimeout(() => {
                // NOTE: We actually have to make the change for the rebuild to happen!
                fs_1.default.writeFileSync(buildFile, fs_1.default.readFileSync(buildFile).toString() + '\n');
                watcher.triggerChanges([buildFile], []);
            }, 1000);
        }
    }, function watchEnd() {
        console.error('watch end');
    });
    console.time(`Build #${++buildCount}`);
    const { handler, rebuild, close } = ncc_1.default(buildFile, {
        watch: watcher,
        sourceMap: true
    });
    handler(({ err, code, map, assets, permissions }) => {
        console.timeEnd(`Build #${buildCount}`);
        console.error({ err, code, map, assets, permissions });
        if (err)
            return console.error({ err });
        if (buildCount === 3) {
            close();
            fs_1.default.writeFileSync(buildFile, fs_1.default.readFileSync(buildFile).toString().slice(0, -2));
        }
    });
    rebuild(() => {
        console.log('rebuild() callback invoked', arguments);
        console.time(`Build #${++buildCount}`);
    });
}
async function main2() {
    const buildFile = path_1.default.resolve('./code/a.js');
    const data = fs_1.default.readFileSync(buildFile, 'utf8');
    console.time('first');
    const watcher = new _1.NccWatcher(buildFile);
    const build1 = await watcher.build();
    console.error(build1.files);
    //console.error({ build1 });
    console.timeEnd('first');
    console.time('second');
    fs_1.default.writeFileSync(buildFile, data + `\n${data.replace(/b/g, 'c')}`);
    const build2 = await watcher.build([buildFile]);
    //console.error({ build2 });
    console.error(build2.files);
    console.timeEnd('second');
    console.time('third');
    fs_1.default.writeFileSync(buildFile, data + `\n${data.replace(/b/g, 'd')}`);
    const build3 = await watcher.build([buildFile]);
    console.error(build3.files);
    console.timeEnd('third');
    // reset
    fs_1.default.writeFileSync(buildFile, data);
    watcher.close();
}
main2().catch(err => {
    console.error({ err });
    process.exit(1);
});
